#!/usr/bin/env ruby
#encoding: utf-8
require 'rubygems'
require 'slop'

$:.unshift 'lib'
require 'magic_cloud'

opts = Slop.parse(help: true, strict: true) do
  on :width=, "Cloud width, pixels (default 960)", as: Integer, default: 960
  on :height=, "Cloud heigh, pixels (default 600)", as: Integer, default: 600

  on :words=,
    "List of words with weights, comma-separated, weight after colon, like 'cat:40,dog:30,eat:20'",
    as: Array
  on :textfile=, "Path to file with some text, magic_cloud will calculate frequencies of words in this text and draw the cloud of them"
  on :maxwords=, "Max words to make a cloud", as: Integer, default: 100

  on :palette=, "Palette name, see README for details"
  on :rotate=, "Rotation algo, see README for details"
  on :scale=, "Scaling algo, see README for details"
  on :font_family=, "Font family (Impact by default)"

  on :f, :file=, "Output file path", required: true

  on :stats, "Output debug log and stats (different operations count while looking for places for words)"
  on :profile, "Run profiler"
end

include MagicCloud

Debug.logger.level = Logger::INFO if opts.stats?

words = case
when opts[:words]
  opts[:words].
    map{|w| w.split(':')}.
    map{|w,c| [w, c.to_i]}.
    each{|w,c| c.zero? and fail(ArgumentError, "Count for word #{w} not defined")}
when opts[:textfile]
  WORD_SEPARATORS = /[\s\u3031-\u3035\u309b\u309c\u30a0\u30fc\uff70]+/
  STOPWORDS = /^(i|me|my|myself|we|us|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|what|which|who|whom|whose|this|that|these|those|am|is|are|was|were|be|been|being|have|has|had|having|do|does|did|doing|will|would|should|can|could|ought|i'm|you're|he's|she's|it's|we're|they're|i've|you've|we've|they've|i'd|you'd|he'd|she'd|we'd|they'd|i'll|you'll|he'll|she'll|we'll|they'll|isn't|aren't|wasn't|weren't|hasn't|haven't|hadn't|doesn't|don't|didn't|won't|wouldn't|shan't|shouldn't|can't|cannot|couldn't|mustn't|let's|that's|who's|what's|here's|there's|when's|where's|why's|how's|a|an|the|and|but|if|or|because|as|until|while|of|at|by|for|with|about|against|between|into|through|during|before|after|above|below|to|from|up|upon|down|in|out|on|off|over|under|again|further|then|once|here|there|when|where|why|how|all|any|both|each|few|more|most|other|some|such|no|nor|not|only|own|same|so|than|too|very|say|says|said|shall)$/

  File.read(opts[:textfile]).
    split(WORD_SEPARATORS).
    map{|word| word.gsub(/[[:punct:]]/, '')}.
    map(&:downcase).
    reject{|word| word =~ STOPWORDS}.
    group_by{|w| w}.
    map{|word, group| [word, group.size]}
else
  fail ArgumentError, "You should provide either --words or --textfile option, where can I take words for cloud?.."
end

words = words.sort_by(&:last).reverse.first(opts[:maxwords])

options = {
  palette: opts[:palette] && opts[:palette].to_sym,
  rotate: opts[:rotate] && opts[:rotate].to_sym,
  scale: opts[:scale] && opts[:scale].to_sym,
  font_family: opts[:font_family]
}.reject{|k, v| v.nil?}

if opts.profile?
  require 'ruby-prof'
  RubyProf.start
end

start = Time.now

cloud = Cloud.new(words, options)
img = cloud.draw(opts[:width], opts[:height])

if opts.profile?
  result = RubyProf.stop
  require 'fileutils'
  FileUtils.mkdir_p 'profile'
  RubyProf::GraphHtmlPrinter.new(result).
    print(File.open('profile/result.html', 'w'))
end

img.write(opts[:file])

p Debug.stats if opts.stats?

puts "Ready in %.2f seconds" % (Time.now - start)
